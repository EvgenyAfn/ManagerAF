import tkinter as tk
import tkinter.font as tkfont
import customtkinter as ctk
import openpyxl
import subprocess
import bcrypt
import pyzipper
import os
import random
import string
from tkinter import filedialog
from tkinter.scrolledtext import ScrolledText
from tktooltip import ToolTip
from PIL import Image, ImageTk
from tkinter import ttk


row_index = 0  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π row_index –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π
excel_filename = ""  # Define excel_filename at the module level
login_mail = "af_mail"  # –í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π(From)
host = "smtp.nikoil.ru"
basedir = os.path.dirname(__file__)


def select_excel_file():
    global excel_filename  # Use the global keyword to modify the module-level variable
    excel_filename = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if not excel_filename:
        return
    log_action(f"‚úÖ–í—ã–±—Ä–∞–Ω Excel —Ñ–∞–π–ª: {excel_filename}")
    update_chose_exc_label()


def update_chose_exc_label():
    if excel_filename:
        ftt = tkfont.Font(family='Segoe UI Emoji', size=8)
        chose_exc.config(text=f"üìù {excel_filename}", fg="green", justify="left", font=ftt)


def search_user():
    login = login_entry.get()
    if not excel_filename or not login:
        log_error("‚ùó–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω‚ùó")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        user_row = None
        row_number = 0

        for row in sheet.iter_rows(min_row=2, values_only=True):
            row_number += 1
            if row[14] == login:
                user_row = list(row)
                break

        if user_row is None:
            log_error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            password, hash_password = user_row[15], user_row[16]
            if password is None:
                password = generate_password()
                user_row[15] = password
                log_action(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: {password}")
            else:
                log_warning("–Ø—á–µ–π–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")

            if hash_password is None:
                hash_password = generate_hash(password)
                user_row[16] = hash_password
                log_action(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω —Ö–µ—à –ø–∞—Ä–æ–ª—è: {hash_password}")
            else:
                log_warning("–Ø—á–µ–π–∫–∞ —Å —Ö–µ—à–µ–º –ø–∞—Ä–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ user_row –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            for i, value in enumerate(user_row, start=1):
                sheet.cell(row=row_number + 1, column=i, value=value)

        workbook.save(excel_filename)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


def generate_password():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –∏–∑ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    import string
    import random
    characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(characters) for _ in range(10))
    return password


def generate_hash(password):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt –≤–µ—Ä—Å–∏–∏ 3.2.0
    salt = bcrypt.gensalt(rounds=8, prefix=b'2a')
    hash_password = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hash_password.decode('utf-8')


# def generate_hash(password):
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt 4.0.+
#     salt = bcrypt.gensalt(rounds=8)
#     hash_password = bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')
#     return hash_password


def save_password_to_txt():
    login = login_entry.get()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞

    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ .txt")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                password = row[15]  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 'P'

                if password is not None:
                    password = str(password)
                    with open(f"./txt/{login}.txt", "w") as txt_file:
                        txt_file.write(password)
                    log_action(f"üîê–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ: {login}.txt")
                else:
                    log_warning("‚ö†Ô∏è–Ø—á–µ–π–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º –ø—É—Å—Ç–∞!")
                break
        else:
            log_error("‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


def create_and_encrypt_zip_archive():
    login = login_entry.get()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ .zip")
        return
    txt_file_path = f"./txt/{login}.txt"
    zip_file_path = f"./to_send/{login}.zip"
    password = generate_random_password()

    try:
        if not os.path.isfile(txt_file_path):
            log_error(f"‚ùó–¢–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active
        email = None

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                email = row[7]
                break

        if email:
            log_action(f"üóÑÔ∏èZip –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {login}.zip")
            log_info(f"–ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: {password} - {email}")
        else:
            log_action(f"üóÑÔ∏èZip –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {login}.zip")
            log_info(f"–ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: {password} - ‚ö†Ô∏èempty Email‚ö†Ô∏è")

        with pyzipper.AESZipFile(zip_file_path, 'w', compression=pyzipper.ZIP_LZMA,
                                 encryption=pyzipper.WZ_AES) as zip_file:
            zip_file.setpassword(password.encode())
            zip_file.write(txt_file_path, f"{login}.txt")

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")


def generate_random_password():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è ZIP –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(characters) for _ in range(5))
    return password


def generate_sql_script(login, hash_password):
    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-—Å–∫—Ä–∏–ø—Ç–∞.")
        return None

    if not hash_password:
        log_error("–•–µ—à –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ Pass&Hash –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return None

    sql_script = f"insert into WEB_API_Users(login,password,refreshTokenId,RoleId,UserId,weight)\n"
    sql_script += f"SELECT '{login}','{hash_password}',NULL,'2C4A4212-A2EA-42D6-B932-B1720FAFBD53',NEWID(),1;"

    return sql_script


def show_sql_window():
    login = login_entry.get()

    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-—Å–∫—Ä–∏–ø—Ç–∞.")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        user_exists = False
        hash_password = None

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                user_exists = True
                hash_password = row[16]
                break

        if not user_exists:
            log_error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif hash_password is None:
            log_error("–•–µ—à –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ Pass&Hash –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        else:
            sql_script = generate_sql_script(login, hash_password)
            log_action(f"‚úîÔ∏è–í–∞—à SQL-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

            if sql_script:
                x_offset = root.winfo_x() - 750  # –ó–∞–¥–∞–π—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
                y_offset = root.winfo_y() + 180
                sql_window = tk.Toplevel(root)
                sql_window.title("SQL-—Å–∫—Ä–∏–ø—Ç")
                sql_window.geometry(f"+{x_offset}+{y_offset}")
                sql_window.resizable(width=False, height=False)
                sql_text = tk.Text(sql_window, wrap=tk.WORD, width=90, height=8)
                sql_text.insert(tk.END, sql_script)
                sql_text.pack()
                sql_text.config(state=tk.DISABLED)

                def copy_and_close():
                    sql_script_to_copy = sql_text.get("1.0", "end-1c")
                    sql_window.clipboard_clear()
                    sql_window.clipboard_append(sql_script_to_copy)
                    sql_window.update()  # now it stays on the clipboard after the window is closed
                    sql_window.destroy()

                copy_button = tk.Button(sql_window, text="üìù–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –∏ –∑–∞–∫—Ä—ã—Ç—å‚ùå",
                                        cursor="hand2", command=copy_and_close)
                copy_button.pack()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


def generate_email_pattern(login):
    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.")
        return None

    mail_pattern = f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n"
    mail_pattern += (f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç—É —Å–∏—Å—Ç–µ–º—ã –ê–∫—Ç–∏–≤-–§–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ë–∞–Ω–∫–∞ –£—Ä–∞–ª—Å–∏–± –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É "
                     f"https://factoring.uralsib.ru/.\n")
    mail_pattern += f"–õ–æ–≥–∏–Ω - '{login}'\n"
    mail_pattern += f"–ü–∞—Ä–æ–ª—å –æ—Ç –ª–æ–≥–∏–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ. –ü–∞—Ä–æ–ª—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º.\n"
    mail_pattern += (f"–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –Ω–∞ support_factoring@uralsib.ru, "
                     f"—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞, –ò–ù–ù, –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞.\n")

    return mail_pattern


def show_mail_window():
    login = login_entry.get()

    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        user_exists = False

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                user_exists = True
                break

        if not user_exists:
            log_error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            mail_pattern = generate_email_pattern(login)
            log_action(f"üì©–í–∞—à —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è {login} —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

            if mail_pattern:
                x_offset = root.winfo_x() - 750  # –ó–∞–¥–∞–π—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
                y_offset = root.winfo_y() - 20
                mail_window = tk.Toplevel(root)
                mail_window.title("–®–∞–±–ª–æ–Ω –¥–ª—è –ø–∏—Å—å–º–∞")
                mail_window.geometry(f"+{x_offset}+{y_offset}")
                mail_text = tk.Text(mail_window, wrap=tk.WORD, width=90, height=8)
                mail_text.insert(tk.END, mail_pattern)
                mail_text.pack()
                mail_text.config(state=tk.DISABLED)
                mail_window.resizable(width=False, height=False)

                def copy_and_close():
                    mail_pattern_to_copy = mail_text.get("1.0", "end-1c")
                    mail_window.clipboard_clear()
                    mail_window.clipboard_append(mail_pattern_to_copy)
                    mail_window.update()  # now it stays on the clipboard after the window is closed
                    mail_window.destroy()

                copy_button = tk.Button(mail_window, text="üìù–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –∏ –∑–∞–∫—Ä—ã—Ç—å‚ùå",
                                        cursor="hand2", command=copy_and_close)
                copy_button.pack()
                mail_window.mainloop()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

class AnimatedButton(tk.Label):
    def __init__(self, parent, click_function):
        super().__init__(parent)

        self.image_list = []
        self.current_frame = 0
        self.play_animation = False
        self.animation_active = False
        self.click_function = click_function

        base_dir = os.path.dirname(__file__)  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        sending_dir = os.path.join(base_dir, 'icons', 'sendings')

        # Load images from the folder
        for i in range(1, 92):
            image_name = f"frame-{i:02d}.png"
            image_path = os.path.join(sending_dir, image_name)
            if os.path.exists(image_path):
                image = Image.open(image_path)
                image = image.resize((160, 100))
                self.image_list.append(ImageTk.PhotoImage(image))

        if self.image_list:
            self.configure(image=self.image_list[self.current_frame])
            self.bind("<Button-1>", self.toggle_animation)

    def toggle_animation(self, _event):
        if not self.animation_active:
            if self.play_animation:
                self.play_animation = False
            else:
                self.animation_active = True
                self.current_frame = 0
                self.animate()
                self.click_function()

    def animate(self):
        if self.animation_active and self.current_frame < len(self.image_list):
            self.configure(image=self.image_list[self.current_frame])
            self.current_frame += 1
            self.after(25, self.animate)
        else:
            self.animation_active = False


class SlidePanel(ctk.CTkFrame):
    def __init__(self, parent, start_pos, end_pos):
        super().__init__(master=parent)

        # general attributes
        self.start_pos = start_pos + 0.07
        self.end_pos = end_pos - 0.173
        # self.width = abs(start_pos - end_pos)
        self.width = 0.465
        self.configure(fg_color="#979aaa")

        # animation logic
        self.pos = self.start_pos
        self.in_start_pos = True

        # layout
        self.place(relx=self.start_pos, rely=0.025, relwidth=self.width, relheight=0.75)

    def animate(self, _event=None):
        if self.in_start_pos:
            self.animate_forward()
        else:
            self.animate_backwards()

    def animate_forward(self):
        if self.pos > self.end_pos:
            self.pos -= 0.008
            self.place(relx=self.pos, rely=0.025, relwidth=self.width, relheight=0.75)
            self.after(5, self.animate_forward)
        else:
            self.in_start_pos = False

    def animate_backwards(self, _event=None):
        if self.pos < self.start_pos:
            self.pos += 0.008
            self.place(relx=self.pos, rely=0.025, relwidth=self.width, relheight=0.75)
            self.after(5, self.animate_backwards)
        else:
            self.in_start_pos = True


def open_email_conf_dialog():
    login = login_entry.get()

    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        user_exists = False
        email = None
        mail_pattern = generate_email_pattern(login)

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                user_exists = True
                email = row[7]
                break

        if not user_exists:
            log_error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif email is None:
            log_warning("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ.")

        else:
            mail_conf_window = tk.Toplevel(root)
            x_offset = root.winfo_x() + 510  # –ó–∞–¥–∞—Ç—å –∂–µ–ª–∞–µ–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
            y_offset = root.winfo_y() - 20
            mail_conf_window.geometry(f"460x350+{x_offset}+{y_offset}")
            mail_conf_window.configure(bg="#85A1B7")
            mail_conf_window.title("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Email")
            mail_conf_window.iconbitmap(os.path.join(basedir, "icons", "favicon_gear.ico"))
            mail_conf_window.resizable(width=False, height=False)
            log_warning("–í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

            # –í–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞
            from_label = tk.Label(mail_conf_window, text="From:", bg="#85A1B7", fg="#FFFFFF")
            from_label.place(x=10, y=20, width=70, height=25)
            from_entry = tk.Entry(mail_conf_window, bg="#6D7D89", fg="#FFFFFF")
            from_entry.insert(0, "support_factoring@uralsib.ru")
            from_entry.place(x=65, y=20, width=170, height=25)

            to_label = tk.Label(mail_conf_window, text="To Send:", bg="#85A1B7", fg="#FFFFFF")
            to_label.place(x=3, y=60, width=70, height=25)
            to_entry = tk.Entry(mail_conf_window, bg="#6D7D89", fg="#FFFFFF")
            to_entry.insert(0, f"{email}")
            to_entry.place(x=65, y=60, width=170, height=25)

            subj_label = tk.Label(mail_conf_window, text="Subject:", bg="#85A1B7", fg="#FFFFFF")
            subj_label.place(x=3, y=90, width=70, height=25)
            subj_entry = tk.Text(mail_conf_window, bg="#6D7D89", fg="#FFFFFF")
            subj_entry.insert(tk.END, "–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç—É –ê–∫—Ç–∏–≤-–§–∞–∫—Ç–æ—Ä–∏–Ω–≥. –ë–∞–Ω–∫ –£—Ä–∞–ª—Å–∏–±")
            subj_entry.configure(font=("Arial", 9))
            subj_entry.place(x=10, y=115, width=225, height=35)

            mess_label = tk.Label(mail_conf_window, text="Message:", bg="#85A1B7", fg="#FFFFFF")
            mess_label.place(x=3, y=155, width=70, height=25)
            mess_entry = tk.Text(mail_conf_window, bg="#6D7D89", fg="#FFFFFF")
            mess_entry.insert(tk.END, f"{mail_pattern}")
            mess_entry.configure(font=("Arial", 9))
            mess_entry.place(x=10, y=180, width=440, height=150)

            def open_to_send_folder():
                folder_path = './to_send'  # Change this to the folder you want to open
                if os.path.exists(folder_path):
                    subprocess.Popen(['explorer', os.path.abspath(folder_path)])

            def label_click(_event):
                if zip_icon_path == os.path.join(basedir, "icons", "arch.png"):
                    open_to_send_folder()

            zip_file_path = f"./to_send/{login}.zip"
            if os.path.exists(zip_file_path):
                zip_icon_path = os.path.join(basedir, "icons", "arch.png")
            else:
                zip_icon_path = os.path.join(basedir, "icons", "error.png")

            zip_label = tk.Label(mail_conf_window, text="Zip:", bg="#85A1B7", fg="#FFFFFF")
            zip_label.place(x=175, y=155, width=40, height=25)

            # Load and resize the icon (archive or error)
            icon_size = (23, 23)  # Set your desired icon size here
            icon_image = Image.open(zip_icon_path)
            icon_image = icon_image.resize(icon_size)  # Resize the icon
            zip_icon = ImageTk.PhotoImage(icon_image)  # Convert the resized image to PhotoImage

            zip_icon_label = tk.Label(mail_conf_window, image=zip_icon, bg="#85A1B7", cursor="hand2")
            zip_icon_label.place(x=210, y=150)
            zip_icon_label.image = zip_icon  # Keep a reference to the image
            # Bind the label to the click event
            zip_icon_label.bind("<Button-1>", label_click)
            ToolTip(zip_icon_label, msg="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å ZIP", delay=1)

            def send_email_on_click():
                if not validate_login_and_password():
                    return

                use_tls = check_sec_var.get()

                send_email(from_entry.get(), to_entry.get(),
                           subj_entry.get("1.0", "end-1c"),
                           mess_entry.get("1.0", "end-1c"),
                           port_entry.get(),
                           host_entry.get(),
                           login_auth.get(),
                           pass_auth.get(),
                           use_tls)

            # –ö–Ω–æ–ø–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ
            # image_label = Extra(mail_conf_window, send_email_on_click, label_width=160, label_height=100,
            #                     image_width=160, image_height=100, cursor="hand2")
            # image_label.pack()
            # image_label.place(x=250, y=60)

            animated_button = AnimatedButton(mail_conf_window, send_email_on_click)
            animated_button.pack(expand=True)
            animated_button.config(cursor="hand2")
            animated_button.place(x=250, y=60, width=150, height=100)

            ToolTip(animated_button, msg="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", delay=1)

            # –¢—É—Ç –∂–µ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
            wrench_image_path = os.path.join(basedir, "icons", "wrench.png")
            wrench_icon_size = (30, 30)

            wrench_image = Image.open(wrench_image_path)
            wrench_image = wrench_image.resize(wrench_icon_size)
            wrench_image = ImageTk.PhotoImage(wrench_image)

            wrench_label = tk.Label(mail_conf_window, image=wrench_image, text="", bg="#85A1B7", fg="#FFFFFF",
                                    cursor="hand2")
            wrench_label.place(relx=0.95, rely=0.08, anchor='center')

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç SlidePanel
            animated_panel = SlidePanel(mail_conf_window, 1.0, 0.7)

            wrench_label.bind("<Button-1>", lambda event: animated_panel.animate())

            ToolTip(wrench_label, msg="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", delay=1)

            conf_label = tk.Label(animated_panel, text="Configuration", bg="#979aaa", fg="#FFFFFF")
            conf_label.configure(font=("Segoe UI Emoji", 11, "bold"))
            conf_label.place(x=-15, y=-5, width=145, height=32)

            host_label = tk.Label(animated_panel, text="SMTP host:", bg="#979aaa")
            host_label.configure(font=("Segoe UI Emoji", 11, "bold"), fg="#bb1818")
            host_label.place(x=5, y=25, width=81, height=30)
            host_entry = tk.Entry(animated_panel, bg="#6D7D89", fg="#FFFFFF")
            host_entry.insert(tk.END, f"{host}")
            host_entry.place(x=90, y=30, width=114, height=25)

            port_label = tk.Label(animated_panel, text="Port", bg="#979aaa", fg="#FFFFFF")
            port_label.configure(font=("Segoe UI Emoji", 11))
            port_label.place(x=5, y=60, width=78, height=30)
            port_entry = tk.Entry(animated_panel, bg="#6D7D89", fg="#FFFFFF")
            port_entry.insert(tk.END, "25")
            port_entry.place(x=90, y=65, width=114, height=25)

            style = ttk.Style()
            style.configure("TCheckbutton", background="#979aaa", foreground="#FFFFFF", activeforeground="#FFFFFF",
                            activebackground="#979aaa")
            # –ß–µ–∫-–±–æ–∫—Å Use Sec
            check_sec_var = tk.IntVar()
            check_sec_var.set(0)
            check_sec = ttk.Checkbutton(animated_panel, variable=check_sec_var, text=" Use Secured Connection",
                                        style="TCheckbutton")
            check_sec.place(x=5, y=95, width=180, height=25)

            # –ß–µ–∫-–±–æ–∫—Å Use Auth
            check_auth_var = tk.IntVar()
            check_auth_var.set(0)
            use_auth = ttk.Checkbutton(animated_panel, text=" Use Auth:", variable=check_auth_var,
                                       style="TCheckbutton")
            use_auth.place(x=5, y=120, width=81, height=30)

            l_auth_label = tk.Label(animated_panel, text="Login:", bg="#979aaa", fg="#FFFFFF")
            l_auth_label.place(x=5, y=148, width=46, height=30)
            login_auth = tk.Entry(animated_panel, state="disabled", bg="#6D7D89", fg="#FFFFFF")
            login_auth.place(x=50, y=150, width=154, height=25)

            p_auth_label = tk.Label(animated_panel, text="Pass:", bg="#979aaa", fg="#FFFFFF")
            p_auth_label.place(x=5, y=183, width=45, height=30)
            pass_auth = tk.Entry(animated_panel, show='*', state="disabled", bg="#6D7D89", fg="#FFFFFF")
            pass_auth.place(x=50, y=185, width=127, height=25)

            # def on_label_click(_event):
            #     animated_panel.animate_backwards()

            ok_icon_size = (30, 30)
            ok_image_path = os.path.join(basedir, "icons", "ok.png")
            my_image2 = Image.open(ok_image_path)  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            my_image2 = my_image2.resize(ok_icon_size)
            my_image2 = ImageTk.PhotoImage(my_image2)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PhotoImage
            ok_label = tk.Label(animated_panel, image=my_image2, bg="#979aaa", cursor="hand2")
            ok_label.place(x=90, y=220)
            ok_label.image = my_image2  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç image
            ok_label.bind("<Button-1>", lambda event: animated_panel.animate_backwards())
            ToolTip(ok_label, msg="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", delay=1)

            # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–¥ –∑–≤–µ–∑–¥–æ—á–∫–∏
            def toggle_password_visibility():
                if pass_auth.cget('show') == '':
                    pass_auth.config(show='*')
                else:
                    pass_auth.config(show='')

            # –ö–Ω–æ–ø–∫–∞ —Å –≥–ª–∞–∑–∏–∫–æ–º
            show_password_button = tk.Button(animated_panel, text="üëÅ",
                                             command=toggle_password_visibility, state="disabled",
                                             borderwidth=0, bg="#979aaa", fg="#FFFFFF", activeforeground="#FFFFFF",
                                             activebackground="#979aaa")
            show_password_button.configure(font=("Segoe UI Emoji", 11))
            show_password_button.place(x=178, y=185, width=35, height=25)
            ToolTip(show_password_button, msg="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å", delay=1)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
            def toggle_auth_fields():
                if check_auth_var.get() == 1:
                    login_auth.config(state="normal")
                    login_auth.insert(0, f"{login_mail}")
                    pass_auth.config(state="normal")
                    show_password_button.config(state="normal", cursor="hand2")
                else:
                    pass_auth.delete(0, "end")
                    login_auth.delete(0, "end")
                    login_auth.config(state="disabled")
                    pass_auth.config(state="disabled")
                    show_password_button.config(state="disabled")
                    pass_auth.config(show='*')

            check_auth_var.trace("w", lambda *args: toggle_auth_fields())

            def validate_login_and_password():
                if check_auth_var.get() == 1:  # Checkbox is active
                    login_au = login_auth.get()
                    password = pass_auth.get()
                    if not login_au:
                        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω.")
                        return False
                    if not password:
                        log_error("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
                        return False
                return True

            mail_conf_window.mainloop()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞: {str(e)}")


def send_email(from_email, to_email, email_subject, mess_content, port_content, host_content, login_au, password,
               use_tls):
    import smtplib
    from email.mime.application import MIMEApplication
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    from email.utils import formatdate
    import ssl

    login = login_entry.get()

    if not login:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.")
        return

    if not from_email:
        log_error("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return

    if not to_email:
        log_error("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return

    if not email_subject:
        log_error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞.")
        return

    if not mess_content:
        log_error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞.")
        return

    if not port_content:
        log_error("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç.")
        return

    if not host_content:
        log_error("–í–≤–µ–¥–∏—Ç–µ HOST.")
        return

    try:
        workbook = openpyxl.load_workbook(excel_filename)
        sheet = workbook.active

        user_exists = False
        email = None
        context = None  # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è TLS

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[14] == login:
                user_exists = True
                email = row[7]
                break

        if not user_exists:
            log_error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif email is None:
            log_warning("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ.")
        else:
            mail_pattern = mess_content

            if mail_pattern:
                msg = MIMEMultipart()
                msg['From'] = from_email
                msg['To'] = to_email
                msg['Date'] = formatdate(localtime=True)
                msg['Subject'] = email_subject
                part2 = MIMEText(mail_pattern, 'plain', "utf-8")
                msg.attach(part2)

                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
                zip_file_path = f"./to_send/{login}.zip"
                if os.path.exists(zip_file_path):
                    with open(zip_file_path, "rb") as file:
                        part = MIMEApplication(
                            file.read(),
                            Name=f"{login}.zip")
                    part['Content-Disposition'] = f'attachment; filename="{login}.zip"'
                    msg.attach(part)
                else:
                    log_error("‚ùó–ê—Ä—Ö–∏–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.")
                    return

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
                if use_tls:
                    context = ssl.create_default_context()
                    context.options &= ~ssl.OP_SINGLE_ECDH_USE
                    context.options &= ~ssl.OP_NO_COMPRESSION

                with smtplib.SMTP(host_content, port_content) as smtp:
                    if use_tls:
                        smtp.starttls(context=context)
                    smtp.login(login_au, password)
                    smtp.sendmail(msg['From'], msg['To'], msg.as_string().encode('utf-8'))
                    log_action(f"‚úîÔ∏è–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–¥—Ä–µ—Å: {to_email}")

    except Exception as e:
        log_error(f"‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö): {str(e)}")
        log_warning(f"‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


def log_action(message):
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, f"{message}\n")
    log_text.config(state=tk.DISABLED)


def log_error(message):
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, f"Error: {message}\n", "error")
    log_text.config(state=tk.DISABLED)


def log_info(message):
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, f"Info: {message}\n", "info")
    log_text.config(state=tk.DISABLED)


def log_warning(message):
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, f"Warning: {message}\n", "warning")
    log_text.config(state=tk.DISABLED)


def clear_log():
    login_entry.delete(0, tk.END)
    log_text.config(state=tk.NORMAL)
    log_text.delete(1.0, tk.END)
    log_text.config(state=tk.DISABLED)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
root = tk.Tk()
root.title("Manager AF (#0.14)")
width = 485
height = 315
screenwidth = root.winfo_screenwidth()
screenheight = root.winfo_screenheight()
alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
root.geometry(alignstr)
root.resizable(width=False, height=False)
root.iconbitmap(os.path.join(basedir, "icons", "favicon_main.ico"))

# –ù–∞–¥–ø–∏—Å—å –æ –≤—ã–±–æ—Ä–µ Excel
chose_exc = tk.Label(root)
chose_exc["cursor"] = "arrow"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
chose_exc["font"] = ft
chose_exc["fg"] = "red"
chose_exc["text"] = "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª ‚û°Ô∏è"
chose_exc["wraplength"] = 355
chose_exc.place(x=0, y=4, width=355, height=45)

# –ö–Ω–æ–ø–∫–∞ "–í—ã–±–µ—Ä–µ—Ç–µ Excel-—Ñ–∞–π–ª"
select_excel_button = tk.Button(root)
select_excel_button["cursor"] = "hand2"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
select_excel_button["font"] = ft
select_excel_button["fg"] = "#000000"
select_excel_button["justify"] = "center"
select_excel_button["text"] = "–í—ã–±—Ä–∞—Ç—å üìÇ"
excelTip = ToolTip(select_excel_button, msg="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", delay=1)
select_excel_button.place(x=360, y=10, width=100, height=30)
select_excel_button["command"] = select_excel_file

# –õ–æ–≥–∏–Ω
login_label = tk.Label(root)
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
login_label["font"] = ft
login_label["fg"] = "#333333"
login_label["justify"] = "right"
login_label["text"] = "–õ–æ–≥–∏–Ω:"
login_label.place(x=40, y=80, width=70, height=25)

# –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
login_entry = tk.Entry(root)
login_entry["borderwidth"] = "1px"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
login_entry["font"] = ft
login_entry["fg"] = "#333333"
login_entry["justify"] = "left"
loginTip = ToolTip(login_entry, msg="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", delay=1)
login_entry.place(x=111, y=80, width=160, height=30)

# –ö–Ω–æ–ø–∫–∞ "Pass&Hash"
search_button = tk.Button(root)
search_button["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
search_button["cursor"] = "hand2"
search_button["font"] = ft
search_button["fg"] = "#000000"
search_button["justify"] = "center"
search_button["text"] = "Pass&Hash üîë"
phTip = ToolTip(search_button, msg="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å/hash –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", delay=1)
search_button.place(x=280, y=80, width=100, height=30)
search_button["command"] = search_user

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞
log_text = ScrolledText(root, wrap=tk.WORD, height=10)
log_text.tag_config("error", foreground="red")
log_text.tag_config("info", foreground="blue")
log_text.tag_config("warning", foreground="orange")
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
log_text["bg"] = "#f0f0f0"
log_text["font"] = ft
log_text["state"] = tk.DISABLED
log_text["fg"] = "#333333"
log_text["relief"] = "sunken"
log_text.place(x=90, y=130, width=385, height=161)

# –ö–Ω–æ–ø–∫–∞ TXT
save_txt = tk.Button(root)
save_txt["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Segoe UI Emoji', size=9)
save_txt["font"] = ft
save_txt["fg"] = "#000000"
save_txt["cursor"] = "hand2"
save_txt["justify"] = "center"
save_txt["text"] = "üóíÔ∏èTXT"
txtTip = ToolTip(save_txt, msg="üóíÔ∏è–°–æ–∑–¥–∞—Ç—å .txt-—Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º –≤ –ø–∞–ø–∫—É ./txt", delay=1)
save_txt.place(x=10, y=130, width=70, height=25)
save_txt["command"] = save_password_to_txt

# –ö–Ω–æ–ø–∫–∞ ZIP
save_zip = tk.Button(root)
save_zip["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
save_zip["font"] = ft
save_zip["fg"] = "#000000"
save_zip["justify"] = "center"
save_zip["cursor"] = "hand2"
save_zip["text"] = "üóÑÔ∏èZIP"
ZipTip = ToolTip(save_zip, msg="üóÑÔ∏è–°–æ–∑–¥–∞—Ç—å Zip-–∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–æ–º txt –≤ –ø–∞–ø–∫—É ./to_send", delay=1)
save_zip.place(x=10, y=160, width=70, height=25)
save_zip["command"] = create_and_encrypt_zip_archive

# –ö–Ω–æ–ø–∫–∞ ClearLog
cls_log = tk.Button(root)
cls_log["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
cls_log["font"] = ft
cls_log["fg"] = "#000000"
cls_log["justify"] = "center"
cls_log["cursor"] = "hand2"
cls_log["text"] = "üóëÔ∏èClear"
LogTip = ToolTip(cls_log, msg="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ–∫–Ω–æ –ª–æ–≥–∞ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞", delay=1)
cls_log.place(x=390, y=80, width=70, height=30)
cls_log["command"] = clear_log

# –ö–Ω–æ–ø–∫–∞ SQL
sql_button = tk.Button(root)
sql_button["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Times', size=10)
sql_button["font"] = ft
sql_button["fg"] = "#000000"
sql_button["justify"] = "center"
sql_button["cursor"] = "hand2"
sql_button["text"] = "‚ôªÔ∏èSQL"
sqlTip = ToolTip(sql_button, msg="‚ôªÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL-–°–∫—Ä–∏–ø—Ç", delay=1)
sql_button.place(x=10, y=220, width=70, height=25)
sql_button["command"] = show_sql_window

# –ö–Ω–æ–ø–∫–∞ Email
mail = tk.Button(root)
mail["bg"] = "#f0f0f0"
ft = tkfont.Font(family='Segoe UI Emoji', size=10)
mail["font"] = ft
mail["fg"] = "#000000"
mail["justify"] = "center"
mail["cursor"] = "hand2"
mail["text"] = "üìßSample"
mailTip = ToolTip(mail, msg="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", delay=1)
mail.place(x=10, y=190, width=70, height=25)
mail["command"] = show_mail_window

# –ö–Ω–æ–ø–∫–∞ c –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∏—Å—å–º–∞
lotus_button = tk.Button(root)
lotus_button["bg"] = "#f0f0f0"
fnt = tkfont.Font(family='Segoe UI Emoji', size=10)
lotus_button["font"] = fnt
lotus_button["fg"] = "#000000"
lotus_button["cursor"] = "hand2"
lotus_button["justify"] = "center"
lotus_button["text"] = "üì™ (beta)"
lotusTip = ToolTip(lotus_button, msg="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏", delay=1)
lotus_button.place(x=10, y=260, width=70, height=30)
lotus_button["command"] = open_email_conf_dialog

root.focus_force()
root.mainloop()
